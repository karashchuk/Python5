# -*- coding: utf-8 -*-
__author__      = "Anatoly Karashchuk"

"""
Это пример небольшой программы для рисования кругов и квадратов.
Вам нужно на основе этой программы сделать небольшую "танцевальную" сценку с
использованием кругов, квардратов и треугольников. Сделать всё это нужно в
объектно ориентированном стиле.

Какие классы нужно реализовать:

-Многоугольник(на его основе сделать квадрат и правильный треугольник)
--класс должне уметь отрисовывать себя
--премещаться в некоторм направлении заданом координатами x, y
--увеличивать(необязательно)
--поворачивать(необязательно)

-Квардрат(наследуется от многоугольника)
--метод __init__ принимает координаты середины, ширину и цвет

-Треугольник(наследуется от многоугольника)
--метод __init__ принимает координаты середины, длинну грани и цвет

-Круг
--метод __init__ принимает координаты середины, радиус и цвет
--класс должне уметь отрисовывать себя
--премещаться в некоторм направлении заданом координатами x, y
--увеличивать(необязательно)

Также рекомендую создать вспомогательный сласс Vector для представления
точек на плоскости и различных операций с ними - сложение, умножение на число,
вычитаные.


Из получившихся классов нужно составить какую-нибудь динамическую сцену.
Смотрите пример example.gif
"""

import turtle
import time
import random
import math

#определяем класс n-угольника в писанного в окружность r 
#с центром в координатах x,y и повернутого на g градусов
class Fig ():
    def __init__(self,x,y,r,n,g,color):
        self.x = x
        self.y = y
        self.r = r
        self.n = n
        self.g = g
        self.color = color
    def draw_fig(self): 
        l = math.sin(math.radians(180/self.n))*2*self.r #вычисляем длину стороны многоугольника
        grad = 360/self.n #вычисляем угол стороны многоугольника вписанного в круг
        turtle.color(self.color)
        turtle.penup()
        turtle.setpos(self.x, self.y -self.r)
        if self.g == 0:
            pass
        else:
            pass
            turtle.circle(self.r,- self.g) #даем первоначальный поворот фигуры на g градусов
        turtle.pendown()
        turtle.right((180 - grad)/2 +grad + 90) #поворачиваем курсор таким образом чтобы фигура рисовалась относительно центра фигуры
        for i in range (self.n):
            turtle.forward(l)
            turtle.right(grad)
        turtle.penup()
        turtle.left((180 - grad)/2 +grad + 90) #возвращаем курсор в первоначальное состояние
        turtle.circle(self.r,self.g) #возвращаем курсор в первоначальное состояние
        turtle.hideturtle()
    def move(self,x,y): # движение центра фигуры
        self.x += x
        self.y += y
    def rotate(self,g): # поворот фигуры на g градусов
        self.g += g
    def size (self,r): # изменение размера  фигуры
        self.r += r

def ab(number):
    l = number
    if number < 0:
        l = - number
    return (l)





def main():

    turtle.tracer(0, 0) #устанавливаем все задержки в 0, чтобы рисовалось мгновенно
    turtle.hideturtle() #убираем точку посередине

    my1 = Fig(0,0,100,3,60,'blue')
    my2 = Fig(0,0,100,12,45,'red')
    my3 = Fig(0,0, 100, 5, 0 ,"green")
    my4 = Fig(0,0, 100, 4, 0 ,"brown")
    dx = 5
    dy = 5
    dr = 2
    x =0
    y = 0
    r = 0
    while True:
        time.sleep(0.1) #засыпаем на полсекунды, чтобы увидеть что нарисовали
        turtle.clear() #очищаем всё нарисованое ранее
        if ab(x) > 300 :# проверяем чтобы не выходило за края области
            dx=-dx
        if ab(y) > 300 :
            dy = -dy
        if ab(r) > 100 :# проверяем чтобы фигура не увиличивалась больше определенного размера
            dr = -dr
        my1.move(dx,dy)
        my1.rotate(3)
        my1.draw_fig()
        my2.move(-dx,-dy)
        my2.size(- dr)
        my2.draw_fig()
        my3.move(dx,-dy)
        my3.rotate(-2)
        my3.size(dr)
        my3.draw_fig()
        my4.move(-dx,dy)
        my4.rotate(1)
        my4.draw_fig()        
        x += dx
        y += dy
        r += dr
        turtle.update() #т.к. мы сделали turtle.tracer(0, 0) нужно обновить экран, чтобы увидеть нарисованное

if __name__ == '__main__':
    main()
